 1. qryDoDReports.cfm â†’ reports_service.py

Copy code
# services/reports_service.py
from app.db import db_session
from models import ScmFieldValues

def get_active_dod_reports():
    return db_session.query(ScmFieldValues)\
        .filter_by(field_id=2000, active=1)\
        .order_by(ScmFieldValues.field_option)\
        .all()
ðŸ”¹ 2. dspDoDReports.cfm â†’ dsp_dod_reports.html (Jinja Template)
HTML Form

Dropdown list

JavaScript with loadSearchForm(id) AJAX

Place JS into a separate file and reference it.

ðŸ”¹ 3. getDoDResults.cfm â†’ dod_routes.py

Copy code
# routes/dod_routes.py
from flask import Blueprint, render_template, request
from services.reports_service import get_active_dod_reports

dod_bp = Blueprint('dod', __name__)

@dod_bp.route("/dod/reports", methods=["GET", "POST"])
def display_dod_reports():
    saved_search_id = request.form.get("SAVED_SEARCH_ID", "")
    active_reports = get_active_dod_reports()
    return render_template("dod/dsp_dod_reports.html", reports=active_reports, saved_search_id=saved_search_id)

@dod_bp.route("/dod/results", methods=["POST"])
def get_dod_results():
    # This replaces getDoDResults.cfm
    # Include logic to handle xfa.* actions and templates like dspDoDResults
    # Can use sub-functions or service layers
    return render_template("dod/dsp_dod_results.html")
********

from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class FieldValue(db.Model):
    __tablename__ = 'scm_field_values'

    id = db.Column('field_value_id', db.Integer, primary_key=True)
    field_id = db.Column(db.Integer, nullable=False)
    field_value = db.Column(db.String(255), nullable=False)
    field_option = db.Column(db.String(255), nullable=False)
    active = db.Column(db.Boolean, nullable=False)

    def __repr__(self):
        return f"<FieldValue {self.field_option}>"

class Form(db.Model):
    __tablename__ = 'SCM_FORM'

    form_id = db.Column(db.Integer, primary_key=True)
    form_name = db.Column(db.String(255), nullable=False)

    def __repr__(self):
        return f"<Form {self.form_name}>"

class FieldAttribute(db.Model):
    __tablename__ = 'scm_field_attributes'

    id = db.Column('field_attribute_id', db.Integer, primary_key=True)
    form_id = db.Column(db.Integer, db.ForeignKey('SCM_FORM.form_id'), nullable=False)
    field_name = db.Column(db.String(255), nullable=False)
    atrium_id = db.Column(db.Integer, nullable=False)
    field_length = db.Column(db.Integer)

    def __repr__(self):
        return f"<FieldAttribute {self.field_name}>"

class SavedSearch(db.Model):
    __tablename__ = 'DOD_SAVED_SEARCH'

    saved_search_id = db.Column(db.Integer, primary_key=True)
    saved_search_name = db.Column(db.String(255), nullable=False)
    saved_search_filter = db.Column(db.String(1024))
    saved_report_id = db.Column(db.Integer)

    def __repr__(self):
        return f"<SavedSearch {self.saved_search_name}>"
